{"version":3,"sources":["components/prettyprintxml/PrettyXML.js","components/prettyjson/PrettyJSON.js","components/landing/Landing.js","App.js","serviceWorker.js","index.js"],"names":["PrettyXML","props","transformXML","bind","xmlText","window","DOMParser","XSLTProcessor","xsltDoc","parseFromString","xslt","importStylesheet","xml","trim","transformedXml","transformToDocument","XMLSerializer","serializeToString","this","data","React","Component","PrettyJSON","JSON","stringify","undefined","Landing","state","request_data","region","response","fetchImpactEstimate","displayFormatDecider","mimetype","event","preventDefault","api_url","response_data_format","axios","post","then","setState","headers","split","catch","error","console","className","onSubmit","htmlFor","type","id","value","name","onChange","e","target","avgAge","Number","avgDailyIncomeInUSD","avgDailyIncomePopulation","data-population","population","data-time-to-elapse","timeToElapse","data-reported-cases","reportedCases","data-total-hospital-beds","totalHospitalBeds","defaultValue","data-period-type","periodType","data-go-estimate","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8a1209d4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass PrettyXML extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.transformXML = this.transformXML.bind(this)\r\n    }\r\n\r\n    transformXML(xmlText) {\r\n        var xsltText = ` \r\n        <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n        <!-- Here is the magic: set indent to format the output -->\r\n        <xsl:output omit-xml-declaration=\"yes\" indent=\"yes\"/>\r\n    \r\n        <!-- Match any element or attribute -->\r\n        <xsl:template match=\"node()|@*\">\r\n          <xsl:copy>\r\n            <xsl:apply-templates select=\"node()|@*\"/>\r\n          </xsl:copy>\r\n        </xsl:template>\r\n      </xsl:stylesheet>`\r\n\r\n        // Bomb out if this browser does not support DOM parsing and transformation\r\n        if (!(window.DOMParser && window.XSLTProcessor)) {\r\n          return xmlText;\r\n        }\r\n        \r\n        // Load the XSLT into a document\r\n        var xsltDoc = new DOMParser().parseFromString(xsltText, \"text/xml\");\r\n      \r\n        // Apply that document to as a stylesheet to a transformer\r\n        var xslt = new XSLTProcessor();\r\n        xslt.importStylesheet(xsltDoc);\r\n      \r\n        // Load the XML into a document.\r\n        // Trim any preceding whitespace to prevent parse failure.\r\n        var xml = new DOMParser().parseFromString(xmlText.trim(), \"text/xml\");\r\n      \r\n        // Transform it\r\n        var transformedXml = xslt.transformToDocument(xml);\r\n      \r\n        // Apply the transformed document if it was successful\r\n        return (!transformedXml) ? xmlText :\r\n          new XMLSerializer().serializeToString(transformedXml);\r\n    }\r\n\r\n    render(){\r\n        return this.transformXML(this.props.data)\r\n    }\r\n    \r\n}\r\n\r\nexport default PrettyXML","import React from 'react'\r\n\r\nclass PrettyJSON extends React.Component{\r\n    render(){\r\n        return JSON.stringify(this.props.data, undefined, 4)\r\n    }\r\n}\r\n\r\nexport default PrettyJSON","import React from 'react'\r\nimport axios from 'axios'\r\nimport PrettyXML from '../prettyprintxml/PrettyXML'\r\nimport PrettyJSON from '../prettyjson/PrettyJSON'\r\nimport './Landing.css'\r\n\r\nclass Landing extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            request_data: {\r\n                region: {\r\n                    \"name\": \"Africa\",\r\n                    \"avgAge\": 19.7,\r\n                    \"avgDailyIncomeInUSD\": 5,\r\n                    \"avgDailyIncomePopulation\": 0.71\r\n                },\r\n                \"periodType\": \"days\",\r\n                \"timeToElapse\": 58,\r\n                \"reportedCases\": 674,\r\n                \"population\": 66622705,\r\n                \"totalHospitalBeds\": 1380614\r\n            },\r\n            response: null,\r\n            \r\n        }\r\n        this.fetchImpactEstimate = this.fetchImpactEstimate.bind(this)\r\n        this.displayFormatDecider = this.displayFormatDecider.bind(this)\r\n        \r\n    }\r\n    \r\n    displayFormatDecider(data){\r\n        if(data.mimetype === \"application/xml\"){\r\n            return <PrettyXML data={data.data} />\r\n        }\r\n        return <PrettyJSON data={data.data}/>\r\n    }\r\n\r\n    fetchImpactEstimate(event){\r\n        event.preventDefault()\r\n        let api_url = \"https://covid19-estimator.herokuapp.com/api/v1/on-covid-19\"\r\n        if(this.state.response_data_format){\r\n            api_url = `${api_url}/${this.state.response_data_format}`\r\n        }\r\n        axios.post(api_url,\r\n        this.state.request_data\r\n        ).then((response) =>  {\r\n           this.setState({response: {data: response.data, mimetype: response.headers[\"content-type\"].split(\";\")[0] }})\r\n        }).catch((error) => {\r\n            console.error(error)\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"py-5\">\r\n                <div className='body'>\r\n                    <h1>Covid19Estimator UI</h1>\r\n                    <div className=\"row\">\r\n                        <div className=\"request-from\">\r\n                            <h2>Request</h2>\r\n                            <form onSubmit={this.fetchImpactEstimate}>\r\n                                <label htmlFor=\"region\">Region</label>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    className=\"form-control\" \r\n                                    id=\"data-region-name\" \r\n                                    value={this.state.request_data.region.name}\r\n                                    onChange={(e)=>this.setState({\r\n                                        request_data:{\r\n                                            ...this.state.request_data, region:{\r\n                                                ...this.state.request_data.region, name: e.target.value\r\n                                            }\r\n                                        }\r\n                                    })}/>\r\n                                \r\n                                <label htmlFor=\"data-region-avgage\">Average Age</label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    className=\"form-control\" \r\n                                    id=\"data-region-avgage\" \r\n                                    value={this.state.request_data.region.avgAge}\r\n                                    onChange={(e)=>this.setState({\r\n                                        request_data:{\r\n                                            ...this.state.request_data, region:{\r\n                                                ...this.state.request_data.region, avgAge: Number(e.target.value)\r\n                                            }\r\n                                        }\r\n                                    })}/>\r\n                                \r\n                                <label htmlFor=\"data-region-avgDailyIncomeInUSD\">Average Daily Income (USD)</label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    className=\"form-control\" \r\n                                    id=\"data-region-avgDailyIncomeInUSD\" \r\n                                    value={this.state.request_data.region.avgDailyIncomeInUSD}\r\n                                    onChange={(e)=>this.setState({\r\n                                        request_data:{\r\n                                            ...this.state.request_data, region:{\r\n                                                ...this.state.request_data.region, avgDailyIncomeInUSD: Number(e.target.value)\r\n                                            }\r\n                                        }\r\n                                    })}/>\r\n                                \r\n                                <label htmlFor=\"data-region-avgDailyIncomePopulation\">Population with Daily Income</label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    className=\"form-control\" \r\n                                    id=\"data-region-avgDailyIncomePopulation\" \r\n                                    value={this.state.request_data.region.avgDailyIncomePopulation}\r\n                                    onChange={(e)=>this.setState({\r\n                                        request_data:{\r\n                                            ...this.state.request_data, region:{\r\n                                                ...this.state.request_data.region, avgDailyIncomePopulation: Number(e.target.value)\r\n                                            }\r\n                                        }\r\n                                    })}/>\r\n                                \r\n                                <label htmlFor=\"data-population\">Population</label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    className=\"form-control\" \r\n                                    id=\"data-population\" \r\n                                    data-population\r\n                                    value={this.state.request_data.population}\r\n                                    onChange={(e)=>this.setState({request_data:{...this.state.request_data, population: e.target.value}})}/>\r\n                                \r\n                                <label htmlFor=\"data-time-to-elapse\">Time to Elapse</label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    className=\"form-control\" \r\n                                    id=\"data-time-to-elapse\" \r\n                                    data-time-to-elapse\r\n                                    value={this.state.request_data.timeToElapse}\r\n                                    onChange={(e)=>this.setState({request_data:{...this.state.request_data, timeToElapse: e.target.value}})}/>\r\n                                \r\n                                <label htmlFor=\"data-reported-cases\">Reported Cases</label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    className=\"form-control\" \r\n                                    id=\"data-reported-cases\" \r\n                                    data-reported-cases\r\n                                    value={this.state.request_data.reportedCases}\r\n                                    onChange={(e)=>this.setState({request_data:{...this.state.request_data, reportedCases: e.target.value}})}\r\n                                    />\r\n                                \r\n                                <label htmlFor=\"data-total-hospital-beds\">Total Hospital Beds</label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    className=\"form-control\" \r\n                                    id=\"data-total-hospital-beds\"\r\n                                    data-total-hospital-beds \r\n                                    value={this.state.request_data.totalHospitalBeds}\r\n                                    onChange={(e)=>this.setState({request_data: {...this.state.request_data, totalHospitalBeds: e.target.value}})}\r\n                                    />\r\n\r\n                                <label htmlFor=\"data-period-type\">Period Type</label>    \r\n                                <select \r\n                                    className=\"custom-select\" \r\n                                    id=\"data-period-type\"\r\n                                    defaultValue=\"days\"\r\n                                    data-period-type\r\n                                    onChange={(e)=>this.setState({request_data: {...this.state.request_data, periodType: e.target.value}})}\r\n                                    >\r\n                                        <option value=\"days\">days</option>\r\n                                        <option value=\"weeks\">weeks</option>\r\n                                        <option value=\"months\">months</option>\r\n                                </select>\r\n\r\n                                <label htmlFor=\"data-format\">Response Data Format</label>\r\n                                <select \r\n\r\n                                    className=\"custom-select\" \r\n                                    id=\"data-format\"\r\n                                    defaultValue=\"json\"\r\n                                    onChange={(e)=>this.setState({response_data_format: e.target.value})}\r\n                                    >\r\n                                        <option value=\"json\">json</option>\r\n                                        <option value=\"xml\">xml</option>\r\n                                </select>\r\n                                <button \r\n                                type=\"submit\" \r\n                                className=\"btn btn-primary\" \r\n                                name=\"data-go-estimate\"\r\n                                data-go-estimate>Estimate</button>\r\n                            </form>\r\n                        </div>\r\n                        <div className='request-preview'>\r\n                            <h2>Response</h2>\r\n                            <div className=\"response-view gatsby-highlight\">\r\n                                <pre id=\"response\">{this.state.response &&\r\n                                this.displayFormatDecider(this.state.response)\r\n                                }\r\n                                </pre>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                            <pre><PrettyJSON data={this.state.request_data}/></pre>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Landing","import React from 'react';\nimport Landing from './components/landing/Landing'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Landing></Landing>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}